[cryptonode]
;;rpc-address can be one of [upstream] values, like rpc-address=$default
rpc-address=127.0.0.1:28681
p2p-address=127.0.0.1:18980

[logging]
;;loglevel optional parameter, log level (3 by default)
;;  format: loglevel=number[,category:{TRACE | DEBUG | FATAL | ERROR | WARNING | INFO}[,next_category...]]
;;  e.g. loglevel=2,supernode.task:INFO,supernode.server:DEBUG
loglevel=2
;console=0      ;;optional parameter, output log to console (true by default)
;;logfile optional parameter, file path to log if present
;;set logfile=syslog to redirect to the syslog
;logfile=1.log
;;log-format ;; optional parameter, you can use new custom format specifier %rfile
;;when you redirect output to syslog and use tabs in the format string, they can be replaced with #011
;log-format=%datetime{%Y-%M-%d %H:%m:%s.%g} %level	%logger	%rfile	%msg
trunc-to-size=256 ;output size of logging binary data, -1 by default that means no limit

[server]
http-address=0.0.0.0:28690
http-connection-timeout=360
coap-address=udp://0.0.0.0:18991
workers-count=0
worker-queue-len=0
workers-expelling-interval-ms=2000	;;optinal parameter, 1000 by default, default time interval per a job before creating substituting worker; 0 means don't expell
upstream-request-timeout=360
timer-poll-interval-ms=1000
lru-timeout-ms=60000
data-dir=
stake-wallet-name=stake-wallet
testnet=true
stake-wallet-refresh-interval-ms=50000

[ipfilter]
;; path to ipfilter rules file
;; rule format: {allow | deny} {<IP>[/<mask>] | all} [;; comment]. The rules are "stacked"
;;	Example:
;;	deny 192.168.1.1/32 ;; deny particular address
;;  allow 192.168.1.0/24 ;; allow all IPs in subnetwork but IP in the previous rule
;;  deny all ;; deny all IPs that don't match the rules above. (By default, all IPs are allowed)
;rules=blacklist.txt
window-size-sec=5 ;; sampling window size, seconds
requests-per-sec=100 ;; maximal amount of requests per second in the window, 0 to disable sampling
ban-ip-sec=300 ;; time duration in seconds to ban particular IP, 0 to ban forever

[upstream]
;;An entry in [upstream] section is a template with the following
;;format:
;;	<upstream-name>=<uri>[,<timeout-seconds>[,{<max-connections>|
;;		keepAlive[:<max-connections-per-ip:port>]}]] [;;<comment>]
;;
;;uri - Upstream URI in the form of <protocol>://<host>:<port>/<end-point>.
;;Any part of the URI can be overwritten by the requester.
;;
;;timeout-seconds - inactivity timeout in seconds
;;
;;max-connections - maximum number of connections, associated with
;;the template.
;;
;;keepAlive:<max-connections-per-host:port> - the parameter indicates
;;the associated connections are kept opened after receiving a response.
;;In this case <max-connections-per-host:port> is maximum number of
;;connections, associated with the template, for each host:port pair.
;;
;;Note, if keepAlive is enabled, the connections may stay openned for
;;unlimited time. Therefore parameters <max-connections> and
;;<max-connections-per-ip:port> are mutuly exclusive.
;;
;;Examples:
;;1.
;;mywallet=http://123.456.0.1:38694/something
;;
;;In the handler we can set
;;
;;output.uri = "$mywallet",
;;output.path = "get/your/number",
;;
;;and return Forward. The framework will try to make a connection using
;;resulting URI http://123.456.0.1:38694/get/your/number. The end point
;;/something is effective only if output.path is unset.
;;
;;2.
;;mywallet=http://0.0.0.0:0/answer
;;
;;In the handler:
;;
;;output.uri = "$mywallet",
;;output.host = "123.456.0.1",
;;output.port = 38694
;;
;;The resulting URI will be http://123.456.0.1:38694/answer.
;;
;;3.
;;mywallet=http://0.0.0.0:0/answer, 2, 10
;;
;;In the handler:
;;
;;output.uri = "$mywallet".
;;
;;The handler can set different values for output.host and output.port,
;;but the total number of associated connections cannot exceed 10.
;;Inactivity timeout is set to 2 seconds, thus inactive connections
;;will be closed after 2 seconds.
;;
;;4.
;;mywallet=http://0.0.0.0:0/answer, 2, keepAlive
;;
;;In the handler:
;;
;;output.uri = "$mywallet".
;;output.host = ...
;;output.port = ...
;;
;;Connections to the same host:port will be reused. There are no
;;restrictions for the number of connections.
;;
;;5.
;;mywallet=http://0.0.0.0:80/answer, 2, keepAlive:10
;;
;;In the handler:
;;
;;output.uri = "$mywallet".
;;output.host = "127.0.0.3"
;;
;;Connections to the host will be reused, but the number of connections
;;will not exeed 10.
;;If the handler sets output.host = "127.0.0.4", maximum number of
;;connections for 127.0.0.4:80 is also 10. Note, that the meaning of 10
;;is different from maximum number for non-keepAlive connections.
;;
default=127.0.0.1:28681
blah=https://127.0.0.1:8080
walletnode=http://127.0.0.1:28694

[graftlets]
;;dirs parameter, a list of directories to search graftlets separated by colons. If a directory is set relative it will be interpreted both relative to the current directory and relative to the executable location. By default, 'graftlets' directory will be used relative to the executable location.
;;e.g. dirs=/var/opt/graftlets:graftlets
dirs=graftlets:/var/opt
